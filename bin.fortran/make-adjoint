####################################################################

# GNU Make commands to maintain an adjoint library of routines.  
# Adjoint codes are keep in .for files with <NLM><LTM><ADJ> tags.
# Here we assume each .for file results in three files: 
# $*.F $*tl.F and $*ad.F.  Each in turn results in an .o file and
# a library entry.

# For adjoint determine list of *.F which are not targets of *.for.

Ffiles := $(wildcard *.F)
forfiles := $(wildcard *.for)
Ftargets := $(subst .for,.F,$(forfiles)) $(subst \
 .for,tl.F,$(forfiles)) $(subst .for,ad.F,$(forfiles)) 
Fnontargets := $(filter-out $(Ftargets),$(Ffiles))

# To update the library

#                 make lib

.PHONY : lib

lib: $(lib)

# $(lib) depends on all possible .o files (even if they do not exist):

$(lib) : $(subst .F,.o,$(sort $(Ffiles) $(Ftargets)))
	$(AR) $(ARFLAGS) $@ $?
#	ranlib $@

# Following the ``DO NOT DELETE...'' line are dependencies
# automatically generated by  makedepend invoked via 

#           gmake makedepend

# makedepend relies on #include statements being in the .F files.
# After changes to the #include statements update the dependencies.
# To insure .F files are current depend depends on adjoint.

.PHONY : depend

depend: adjoint
	makedepend -- $(CPPFLAGS) -- *.F
	@echo --------Dependencies are updated.

# To update any missing $(Ftargets) use

#                 make adjoint

.PHONY : adjoint nlm ltm adj

adjoint :
	@echo Updating any missing .F files which are targets.
	$(MAKE) nlm
	$(MAKE) ltm
	$(MAKE) adj

# The simpler rule 
#     adjoint : nlm ltm adj
# doesn't work when say a single ltm file is missing, because 
# the rule to create the %tl.F file will already be satisfied
# by the existence of the %.F file (the NLM file).  Also if 
# only a single ltm or adj file is not up to date an ordinary make
# will not notice the out of date file for the same reason.

# When in doubt make adjoint first.

# Note: actual execution will be different than with the -n option.
# If all three files are missing or out of date, make -n adjoint will
# indicate three executions of the rule for the .F files, but 
# only one execution will acutally take place.

nlm: $(subst .for,.F,$(forfiles))
	@echo --------NLM files are updated.

ltm: $(subst .for,tl.F,$(forfiles))
	@echo --------LTM files are updated.

adj: $(subst .for,ad.F,$(forfiles))
	@echo --------ADJ files are updated.

# Keep any .F files created by making them PRECIOUS:

.PRECIOUS : %.F

# To expand <NLM><LTM><ADJ> tags we make the .F files:
ifdef VAM_ADJ
%ad.F %tl.F %.F : %.for
	@[ -f adj.out ] && $(RM) adj.out ; date > adj.out
	/opt/bin/emacs -batch $< -l $(elisp) -f alfa-create-files 2>> adj.out
endif
# Note: order of targets important.  Matching is from left to right.
# E.g., testad.F should match %ad.F not %.F.

#       See adjoint.el in /home/foehn/nwp/rnh/elisp/ !!!

test:
	@echo Ffiles : $(Ffiles)
	@echo forfiles : $(forfiles)
	@echo Ftargets : $(Ftargets)
	@echo Fnontargets : $(Fnontargets)

printable := $(sort $(wildcard *.h)) $(sort $(forfiles) $(Fnontargets))

print : $(printable)
	/usr/5bin/pr -f -l60 -n $? | rpr -cr10
	touch print

clean : cleanadj
	$(RM) $(lib) *.o 

cleanadj :
      ifdef VAM_ADJ
	$(RM) $(Ftargets)
      endif
